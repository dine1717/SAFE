# -*- coding: utf-8 -*-
"""qna.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1856FwEzh5XljxsuuKa4lxTPhd0nie1o2
"""



from transformers import pipeline

import requests
import streamlit as st
import re
#from selenium import webdriver
#from selenium.webdriver.common.keys import Keys
import numpy as np
import pandas as pd
from scrapy.http import HtmlResponse
from lxml import html
import time
import json
from bs4 import BeautifulSoup
#from selenium.common.exceptions import NoSuchElementException        
#from selenium.webdriver.chrome.options import Options
#from selenium import webdriver

import os, signal
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' ## This helps in avoiding Tensorflow memory allocation error
#Using sklearn version of cosine_similarity
from sklearn.metrics.pairwise import cosine_similarity
from nltk.tokenize import sent_tokenize

subscription_key = "0a1dc4266b5445c9bbe468b9ff103f38"
search_url = "https://api.cognitive.microsoft.com/bing/v7.0/search"

#Function to get britannica link from serach_term
def get_rel_brit_link(search_term):
    search_term = search_term + ' ' + 'verizon'
    print(search_term)
    headers = {"Ocp-Apim-Subscription-Key" : subscription_key}
    params  = {"q": search_term, "textDecorations":True, "textFormat":"HTML", "responseFilter":"Webpages"}
    print(params)
    response = requests.get(search_url, headers=headers, params=params)
    response.raise_for_status()
    search_results = response.json()
    rows = "\n".join(["""<tr>
                       <td>{0}</td>
                     </tr>""".format(v["url"]) \
                  for v in search_results["webPages"]["value"]])
    
    url_list = re.findall(r'<td>(.*?)</td>', rows)
    req_url =[]
    pattern = "verizon.com/articles"
    for url in url_list:
        match = re.search(pattern, url)
        if match:
            req_url.append(url)
    print(req_url)
    return req_url[0]

URL = get_rel_brit_link('https://www.verizon.com/articles/making-sense-of-data-how-much-do-you-need/') #https://www.verizon.com/home/fios/#fios_means_ultra
# URL

# importing required libraries
import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

def cleanhtml(raw_html):
    cleanr = re.compile('<.*?>')
    cleantext = re.sub(cleanr, '', raw_html)
    return cleantext
    
def get_data(url):
  #url = url
  # headers
  headers = {
      'User-Agent': "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
      }
  
  # send request to download the data
  response = requests.request("GET", url, headers=headers)

  # parse the downloaded data
  data = BeautifulSoup(response.text, 'html.parser')
  #print(data)

  html_text = data.find_all('p')


  txt_new = []
  for i in range(0,len(html_text)):
    #print(i)
    txt = cleanhtml(str(html_text[i]))
    txt = txt.lower()
    txt_new.append(txt)
    #txt_new=txt_new.strip()

  return txt_new[4:]

data = get_data(URL)


question = 'how much data 4glte uses for video?'

context =r"Typically, customers must sign up for device protection within 30 days of activating their device. But if you’ve missed that window, Verizon occasionally offers open enrollment periods which are not guaranteed. Newly purchased devices are eligible for device protection, along with added or upgraded. If a device is not new (aka BYOD), it must be Nobody’s perfect. All of us drop, break or leave things behind at times. If that lost or broken thing is a pair of sunglasses or a favorite coffee mug, it might cause a small inconvenience. But a lost, broken or stolen smartphone can be cause for a much bigger concern. Luckily, that’s exactly why Verizon offers device protection. By protecting your new device now, you can ensure that a cracked screen repair or a bigger fix won’t turn into an expensive ordeal down the road. Read on to learn what’s covered by various Verizon device protection options, how to enroll, what device protection claims look like and what to expect when you have device protection. Nearly all of Verizon’s device protection options include coverage for loss, theft, battery failure, physical damage (including liquid damage) and post-warranty electrical or mechanical malfunctions. And the range of plans means that you can find a just-right solution for you, no matter how many lines you have.Each plan offered by Verizon lets customers file at least 3 claims in a 12-month period for a single device. Deductibles range from $9 to $249 per claim, depending on the plan and the claim. Plans also offer same-day or next-day device replacement depending on certain criteria including claim approval time."

data_new = ' '.join(data)

# Generating an answer to the question in context
qa = pipeline("question-answering")
answer = qa(question=question, context=data_new)

# Print the answer
print(f"Question: {question}")
print(f"Answer: '{answer['answer']}' with score {answer['score']}")

test_url  = get_rel_brit_link('within how many days i should get verizon TMP plan') #https://www.verizon.com/home/fios/#fios_means_ultra
test_data = get_data(test_url)
test_data = ' '.join(test_data)
# test_data

# question = 'within how many days i should get verizon TMP plan'
# # Generating an answer to the question in context
# qa = pipeline("question-answering")
# answer = qa(question=question, context=test_data)
# answer

def ques_qnswer(question):
  test_url=get_rel_brit_link(question)
  test_data = get_data(test_url)
  test_data = ' '.join(test_data)
  qa = pipeline("question-answering")
  answer = qa(question=question, context=test_data)
  return answer
